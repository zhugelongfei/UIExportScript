using UnityEngine;

/**
 * Autogenerated by program
 *
 * Author ZhuGeLongFei
 *
 * Do not edit unless you are sure that you know what you are doning
 */

namespace AutoExportScriptData
{
#foreach($classData in $classDic)
#set($className=$classData.key)
#set($varList=$classData.value)

	public partial class $className
	{
		public GameObject thisObjRoot;
## 变量Start
#foreach($varInfo in $varList)

		#region $varInfo.type $varInfo.variableName
		private const string $varInfo.constStrVaiableName = "$varInfo.variableName";
		private $varInfo.type $varInfo.privateVariableName;
		public $varInfo.type $varInfo.variableName
		{
			get
			{
				if (null == $varInfo.privateVariableName)
#if($varInfo.isGameObjectReference)
					$varInfo.privateVariableName = DefaultObjForUI.DefaultGameObject(thisObjRoot, $varInfo.constStrVaiableName);
#else
					$varInfo.privateVariableName = DefaultObjForUI.DefaultComponent<$varInfo.type>(thisObjRoot, $varInfo.constStrVaiableName);
#end
				return $varInfo.privateVariableName;
			}
		}
		#endregion
#end
## 变量End
#*
## 析构函数Start
		~$className()
		{
			Clear();
		}
## 析构函数End
*#
## Init函数Start
		public void Init(GameObject objRoot)
		{
			if (objRoot == null)
				return;

			thisObjRoot = objRoot;
			thisObjRoot.SetActive(true);
			UIProgramData[] allData = thisObjRoot.GetComponentsInChildren<UIProgramData>(true);
			if (null == allData || allData.Length <= 0)
				return;

			for (int iLoop = 0; iLoop < allData.Length; iLoop++)
			{
				UIProgramData programData = allData[iLoop];
				if (null != programData.ExportData && programData.ExportData.Length > 0)
				{
					for (int iIndex = 0; iIndex < programData.ExportData.Length; iIndex++)
					{
						UIExportData exportData = programData.ExportData[iIndex];
						switch (exportData.VariableName)
						{
#foreach($varInfo in $varList)
							case $varInfo.constStrVaiableName:
#if($varInfo.isGameObjectReference)
								$varInfo.privateVariableName = programData.gameObject;
#else
								$varInfo.privateVariableName = ($varInfo.fullType)exportData.CompReference;
#end
								break;
#end
						}
					}
				}
			}
		}
## Init函数End

## Clear函数Start
		public void Clear()
		{
			thisObjRoot = null;
#foreach($varInfo in $varList)
			$varInfo.privateVariableName = null;
#end
		}
## Clear函数End
	}
#end
}